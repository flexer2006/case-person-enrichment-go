version: '3.8'

services:
  postgres:
    build:
      context: ../containers/docker
      dockerfile: postgres.Dockerfile
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  service:
    build:
      context: ..
      dockerfile: containers/docker/service.Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SSLMODE=${POSTGRES_SSLMODE}
      - POSTGRES_CONNECT_RETRIES=${POSTGRES_CONNECT_RETRIES}
      - POSTGRES_CONNECT_RETRY_INTERVAL=${POSTGRES_CONNECT_RETRY_INTERVAL}
      - HTTP_PORT=${HTTP_PORT}
      - HTTP_HOST=0.0.0.0
      - HTTP_READ_TIMEOUT=${HTTP_READ_TIMEOUT}
      - HTTP_WRITE_TIMEOUT=${HTTP_WRITE_TIMEOUT}
      - MIGRATIONS_DIR=/app/migrations
      - LOGGER_LEVEL=${LOGGER_LEVEL}
      - LOGGER_FORMAT=${LOGGER_FORMAT}
      - LOGGER_MODEL=${LOGGER_MODEL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    build:
      context: ..
      dockerfile: containers/docker/nginx.Dockerfile
    ports:
      - "80:80"
    depends_on:
      - service
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge